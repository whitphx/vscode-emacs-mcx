{
	"name": "emacs-mcx",
	"displayName": "Awesome Emacs Keymap",
	"description": "Emacs Friendly Keymap with multi cursor support, improved mark-mode experience, clipboard and kill-ring integration, and lots of improvements and bug fixes.",
	"version": "0.32.0",
	"publisher": "tuttieee",
	"repository": {
		"type": "git",
		"url": "https://github.com/whitphx/vscode-emacs-mcx"
	},
	"engines": {
		"vscode": "^1.51.0"
	},
	"categories": [
		"Other",
		"Keymaps"
	],
	"license": "MIT",
	"icon": "images/icon.png",
	"keywords": [
		"emacs",
		"keybindings",
		"multi cursor",
		"selection",
		"mark mode"
	],
	"activationEvents": [
		"*"
	],
	"extensionKind": [
		"ui",
		"workspace"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "Awesome Emacs Keymap (emacs-mcx) configuration",
			"properties": {
				"emacs-mcx.killRingMax": {
					"type": "number",
					"default": 60,
					"description": "Maximum number of Kill Ring entries"
				},
				"emacs-mcx.markRingMax": {
					"type": "number",
					"default": 16,
					"description": "Maximum number of Mark Ring entries"
				},
				"emacs-mcx.killWholeLine": {
					"type": "boolean",
					"default": false,
					"description": "Same to kill-whole-line variable in Emacs"
				},
				"emacs-mcx.strictEmacsMove": {
					"type": "boolean",
					"default": false,
					"description": "Simulate strictly the original emacs's cursor movements or preserve VSCode's native ones"
				},
				"emacs-mcx.useMetaPrefixEscape": {
					"type": "boolean",
					"default": false,
					"description": "If true, Escape key works as the Meta prefix."
				},
				"emacs-mcx.useMetaPrefixCtrlLeftBracket": {
					"type": "boolean",
					"default": false,
					"description": "If true, ctrl+[ works as the Meta prefix."
				},
				"emacs-mcx.useMetaPrefixMacCmd": {
					"type": "boolean",
					"default": false,
					"description": "If true, Command (âŒ˜) key works as the Meta prefix (macOS only)."
				},
				"emacs-mcx.cursorMoveOnFindWidget": {
					"type": "boolean",
					"default": false,
					"description": "If true, the find widget does not close when using cursor moving commands while this is different from the original Emacs' behavior."
				},
				"emacs-mcx.enableOverridingTypeCommand": {
					"type": "boolean",
					"default": false,
					"description": "If true, overriding `type` command is enabled to use prefix arguments on character inputs by IME."
				},
				"emacs-mcx.debug.silent": {
					"type": "boolean",
					"description": "If true, all logs are suppressed.",
					"default": false
				},
				"emacs-mcx.debug.loggingLevelForAlert": {
					"type": "string",
					"description": "Maximum level of messages to present as VS Code information window.",
					"default": "error",
					"enum": [
						"error",
						"warn",
						"info",
						"verbose",
						"debug",
						"silly"
					]
				},
				"emacs-mcx.debug.loggingLevelForConsole": {
					"type": "string",
					"description": "Maximum level of messages to log to console. Logs are visible in developer tools.",
					"default": "error",
					"enum": [
						"error",
						"warn",
						"info",
						"verbose",
						"debug",
						"silly"
					]
				}
			}
		},
		"keybindings": [
			{
				"key": "ctrl+u",
				"command": "emacs-mcx.universalArgument",
				"when": "editorTextFocus"
			},
			{
				"key": "0",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					0
				]
			},
			{
				"key": "0",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"0"
				]
			},
			{
				"key": "1",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					1
				]
			},
			{
				"key": "1",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"1"
				]
			},
			{
				"key": "2",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					2
				]
			},
			{
				"key": "2",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"2"
				]
			},
			{
				"key": "3",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					3
				]
			},
			{
				"key": "3",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"3"
				]
			},
			{
				"key": "4",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					4
				]
			},
			{
				"key": "4",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"4"
				]
			},
			{
				"key": "5",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					5
				]
			},
			{
				"key": "5",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"5"
				]
			},
			{
				"key": "6",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					6
				]
			},
			{
				"key": "6",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"6"
				]
			},
			{
				"key": "7",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					7
				]
			},
			{
				"key": "7",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"7"
				]
			},
			{
				"key": "8",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					8
				]
			},
			{
				"key": "8",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"8"
				]
			},
			{
				"key": "9",
				"when": "emacs-mcx.acceptingArgument && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.universalArgumentDigit",
				"args": [
					9
				]
			},
			{
				"key": "9",
				"command": "emacs-mcx.typeChar",
				"when": "!emacs-mcx.acceptingArgument && emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"args": [
					"9"
				]
			},
			{
				"key": "!",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"!"
				]
			},
			{
				"key": "\"",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"\""
				]
			},
			{
				"key": "#",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"#"
				]
			},
			{
				"key": "$",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"$"
				]
			},
			{
				"key": "%",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"%"
				]
			},
			{
				"key": "&",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"&"
				]
			},
			{
				"key": "'",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"'"
				]
			},
			{
				"key": "(",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"("
				]
			},
			{
				"key": ")",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					")"
				]
			},
			{
				"key": "*",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"*"
				]
			},
			{
				"key": "+",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"+"
				]
			},
			{
				"key": ",",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					","
				]
			},
			{
				"key": "-",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"-"
				]
			},
			{
				"key": ".",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"."
				]
			},
			{
				"key": "/",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"/"
				]
			},
			{
				"key": ":",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					":"
				]
			},
			{
				"key": ";",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					";"
				]
			},
			{
				"key": "<",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"<"
				]
			},
			{
				"key": "=",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"="
				]
			},
			{
				"key": ">",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					">"
				]
			},
			{
				"key": "?",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"?"
				]
			},
			{
				"key": "@",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"@"
				]
			},
			{
				"key": "A",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"A"
				]
			},
			{
				"key": "B",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"B"
				]
			},
			{
				"key": "C",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"C"
				]
			},
			{
				"key": "D",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"D"
				]
			},
			{
				"key": "E",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"E"
				]
			},
			{
				"key": "F",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"F"
				]
			},
			{
				"key": "G",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"G"
				]
			},
			{
				"key": "H",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"H"
				]
			},
			{
				"key": "I",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"I"
				]
			},
			{
				"key": "J",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"J"
				]
			},
			{
				"key": "K",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"K"
				]
			},
			{
				"key": "L",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"L"
				]
			},
			{
				"key": "M",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"M"
				]
			},
			{
				"key": "N",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"N"
				]
			},
			{
				"key": "O",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"O"
				]
			},
			{
				"key": "P",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"P"
				]
			},
			{
				"key": "Q",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Q"
				]
			},
			{
				"key": "R",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"R"
				]
			},
			{
				"key": "S",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"S"
				]
			},
			{
				"key": "T",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"T"
				]
			},
			{
				"key": "U",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"U"
				]
			},
			{
				"key": "V",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"V"
				]
			},
			{
				"key": "W",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"W"
				]
			},
			{
				"key": "X",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"X"
				]
			},
			{
				"key": "Y",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Y"
				]
			},
			{
				"key": "Z",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Z"
				]
			},
			{
				"key": "[",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"["
				]
			},
			{
				"key": "\\",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"\\"
				]
			},
			{
				"key": "]",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"]"
				]
			},
			{
				"key": "^",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"^"
				]
			},
			{
				"key": "_",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"_"
				]
			},
			{
				"key": "`",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"`"
				]
			},
			{
				"key": "a",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"a"
				]
			},
			{
				"key": "b",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"b"
				]
			},
			{
				"key": "c",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"c"
				]
			},
			{
				"key": "d",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"d"
				]
			},
			{
				"key": "e",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"e"
				]
			},
			{
				"key": "f",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"f"
				]
			},
			{
				"key": "g",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"g"
				]
			},
			{
				"key": "h",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"h"
				]
			},
			{
				"key": "i",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"i"
				]
			},
			{
				"key": "j",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"j"
				]
			},
			{
				"key": "k",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"k"
				]
			},
			{
				"key": "l",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"l"
				]
			},
			{
				"key": "m",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"m"
				]
			},
			{
				"key": "n",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"n"
				]
			},
			{
				"key": "o",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"o"
				]
			},
			{
				"key": "p",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"p"
				]
			},
			{
				"key": "q",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"q"
				]
			},
			{
				"key": "r",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"r"
				]
			},
			{
				"key": "s",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"s"
				]
			},
			{
				"key": "t",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"t"
				]
			},
			{
				"key": "u",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"u"
				]
			},
			{
				"key": "v",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"v"
				]
			},
			{
				"key": "w",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"w"
				]
			},
			{
				"key": "x",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"x"
				]
			},
			{
				"key": "y",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"y"
				]
			},
			{
				"key": "z",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"z"
				]
			},
			{
				"key": "{",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"{"
				]
			},
			{
				"key": "|",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"|"
				]
			},
			{
				"key": "}",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"}"
				]
			},
			{
				"key": "~",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"~"
				]
			},
			{
				"key": "space",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					" "
				]
			},
			{
				"key": "enter",
				"command": "emacs-mcx.newLine",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly"
			},
			{
				"key": "backspace",
				"command": "emacs-mcx.deleteBackwardChar",
				"when": "emacs-mcx.prefixArgumentExists && editorTextFocus && !editorReadonly"
			},
			{
				"key": "right",
				"command": "emacs-mcx.forwardChar",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+f",
				"command": "emacs-mcx.forwardChar",
				"when": "editorTextFocus"
			},
			{
				"key": "right",
				"command": "emacs-mcx.forwardChar",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+f",
				"command": "emacs-mcx.forwardChar",
				"when": "terminalFocus"
			},
			{
				"key": "right",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.forwardChar"
				}
			},
			{
				"key": "ctrl+f",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.forwardChar"
				}
			},
			{
				"key": "left",
				"command": "emacs-mcx.backwardChar",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+b",
				"command": "emacs-mcx.backwardChar",
				"when": "editorTextFocus"
			},
			{
				"key": "left",
				"command": "emacs-mcx.backwardChar",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+b",
				"command": "emacs-mcx.backwardChar",
				"when": "terminalFocus"
			},
			{
				"key": "left",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.backwardChar"
				}
			},
			{
				"key": "ctrl+b",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.backwardChar"
				}
			},
			{
				"key": "up",
				"command": "emacs-mcx.previousLine",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "emacs-mcx.previousLine",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "up",
				"command": "emacs-mcx.previousLine",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+p",
				"command": "emacs-mcx.previousLine",
				"when": "terminalFocus"
			},
			{
				"key": "up",
				"command": "selectPrevSuggestion",
				"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
			},
			{
				"key": "ctrl+p",
				"command": "selectPrevSuggestion",
				"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
			},
			{
				"key": "up",
				"command": "showPrevParameterHint",
				"when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
			},
			{
				"key": "ctrl+p",
				"command": "showPrevParameterHint",
				"when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
			},
			{
				"key": "up",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.previousLine"
				}
			},
			{
				"key": "ctrl+p",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.previousLine"
				}
			},
			{
				"key": "down",
				"command": "emacs-mcx.nextLine",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+n",
				"command": "emacs-mcx.nextLine",
				"when": "editorTextFocus"
			},
			{
				"key": "down",
				"command": "emacs-mcx.nextLine",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+n",
				"command": "emacs-mcx.nextLine",
				"when": "terminalFocus"
			},
			{
				"key": "down",
				"command": "selectNextSuggestion",
				"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
			},
			{
				"key": "ctrl+n",
				"command": "selectNextSuggestion",
				"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
			},
			{
				"key": "down",
				"command": "showNextParameterHint",
				"when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
			},
			{
				"key": "ctrl+n",
				"command": "showNextParameterHint",
				"when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
			},
			{
				"key": "down",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.nextLine"
				}
			},
			{
				"key": "ctrl+n",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.nextLine"
				}
			},
			{
				"key": "home",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+a",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "editorTextFocus"
			},
			{
				"key": "home",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+a",
				"command": "emacs-mcx.moveBeginningOfLine",
				"when": "terminalFocus"
			},
			{
				"key": "home",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.moveBeginningOfLine"
				}
			},
			{
				"key": "ctrl+a",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.moveBeginningOfLine"
				}
			},
			{
				"key": "end",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+e",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "editorTextFocus"
			},
			{
				"key": "end",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "terminalFocus"
			},
			{
				"key": "ctrl+e",
				"command": "emacs-mcx.moveEndOfLine",
				"when": "terminalFocus"
			},
			{
				"key": "end",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.moveEndOfLine"
				}
			},
			{
				"key": "ctrl+e",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
				"args": {
					"then": "emacs-mcx.moveEndOfLine"
				}
			},
			{
				"key": "alt+f",
				"command": "emacs-mcx.forwardWord",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+f",
				"mac": "cmd+f",
				"command": "emacs-mcx.forwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape f",
				"command": "emacs-mcx.forwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ f",
				"command": "emacs-mcx.forwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+f",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.forwardWord"
				}
			},
			{
				"key": "alt+f",
				"mac": "cmd+f",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.forwardWord"
				}
			},
			{
				"key": "escape f",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.forwardWord"
				}
			},
			{
				"key": "ctrl+[ f",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.forwardWord"
				}
			},
			{
				"key": "alt+b",
				"command": "emacs-mcx.backwardWord",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+b",
				"mac": "cmd+b",
				"command": "emacs-mcx.backwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape b",
				"command": "emacs-mcx.backwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ b",
				"command": "emacs-mcx.backwardWord",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+b",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.backwardWord"
				}
			},
			{
				"key": "alt+b",
				"mac": "cmd+b",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.backwardWord"
				}
			},
			{
				"key": "escape b",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.backwardWord"
				}
			},
			{
				"key": "ctrl+[ b",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.backwardWord"
				}
			},
			{
				"key": "alt+m",
				"command": "emacs-mcx.backToIndentation",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+m",
				"mac": "cmd+m",
				"command": "emacs-mcx.backToIndentation",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape m",
				"command": "emacs-mcx.backToIndentation",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ m",
				"command": "emacs-mcx.backToIndentation",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+m",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.backToIndentation"
				}
			},
			{
				"key": "alt+m",
				"mac": "cmd+m",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.backToIndentation"
				}
			},
			{
				"key": "escape m",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.backToIndentation"
				}
			},
			{
				"key": "ctrl+[ m",
				"command": "emacs-mcx.isearchExit",
				"when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.backToIndentation"
				}
			},
			{
				"key": "pagedown",
				"command": "emacs-mcx.scrollUpCommand",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "ctrl+v",
				"command": "emacs-mcx.scrollUpCommand",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "pagedown",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "emacs-mcx.scrollUpCommand"
				}
			},
			{
				"key": "ctrl+v",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "emacs-mcx.scrollUpCommand"
				}
			},
			{
				"key": "pageup",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible"
			},
			{
				"key": "alt+v",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+v",
				"mac": "cmd+v",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape v",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ v",
				"command": "emacs-mcx.scrollDownCommand",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "pageup",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "emacs-mcx.scrollDownCommand"
				}
			},
			{
				"key": "alt+v",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.scrollDownCommand"
				}
			},
			{
				"key": "alt+v",
				"mac": "cmd+v",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.scrollDownCommand"
				}
			},
			{
				"key": "escape v",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.scrollDownCommand"
				}
			},
			{
				"key": "ctrl+[ v",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.scrollDownCommand"
				}
			},
			{
				"key": "alt+shift+[",
				"command": "emacs-mcx.backwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+shift+[",
				"mac": "cmd+shift+[",
				"command": "emacs-mcx.backwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape shift+[",
				"command": "emacs-mcx.backwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ shift+[",
				"command": "emacs-mcx.backwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+shift+]",
				"command": "emacs-mcx.forwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+shift+]",
				"mac": "cmd+shift+]",
				"command": "emacs-mcx.forwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape shift+]",
				"command": "emacs-mcx.forwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ shift+]",
				"command": "emacs-mcx.forwardParagraph",
				"when": "editorTextFocus && !suggestWidgetVisible && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+shift+.",
				"command": "emacs-mcx.endOfBuffer",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+shift+.",
				"mac": "cmd+shift+.",
				"command": "emacs-mcx.endOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape shift+.",
				"command": "emacs-mcx.endOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ shift+.",
				"command": "emacs-mcx.endOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+shift+.",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.endOfBuffer"
				}
			},
			{
				"key": "alt+shift+.",
				"mac": "cmd+shift+.",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.endOfBuffer"
				}
			},
			{
				"key": "escape shift+.",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.endOfBuffer"
				}
			},
			{
				"key": "ctrl+[ shift+.",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.endOfBuffer"
				}
			},
			{
				"key": "alt+shift+,",
				"command": "emacs-mcx.beginningOfBuffer",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+shift+,",
				"mac": "cmd+shift+,",
				"command": "emacs-mcx.beginningOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape shift+,",
				"command": "emacs-mcx.beginningOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ shift+,",
				"command": "emacs-mcx.beginningOfBuffer",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+shift+,",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.beginningOfBuffer"
				}
			},
			{
				"key": "alt+shift+,",
				"mac": "cmd+shift+,",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "emacs-mcx.beginningOfBuffer"
				}
			},
			{
				"key": "escape shift+,",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "emacs-mcx.beginningOfBuffer"
				}
			},
			{
				"key": "ctrl+[ shift+,",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "emacs-mcx.beginningOfBuffer"
				}
			},
			{
				"key": "alt+g alt+g",
				"command": "workbench.action.gotoLine",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+g",
				"mac": "cmd+g cmd+g",
				"command": "workbench.action.gotoLine",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g g",
				"command": "workbench.action.gotoLine",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g g",
				"mac": "cmd+g g",
				"command": "workbench.action.gotoLine",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+g",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "workbench.action.gotoLine"
				}
			},
			{
				"key": "alt+g alt+g",
				"mac": "cmd+g cmd+g",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "workbench.action.gotoLine"
				}
			},
			{
				"key": "alt+g g",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "workbench.action.gotoLine"
				}
			},
			{
				"key": "alt+g g",
				"mac": "cmd+g g",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "workbench.action.gotoLine"
				}
			},
			{
				"key": "escape g",
				"command": "workbench.action.gotoLine",
				"when": "config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "alt+g n",
				"command": "editor.action.marker.next",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g n",
				"mac": "cmd+g n",
				"command": "editor.action.marker.next",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+n",
				"command": "editor.action.marker.next",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+n",
				"mac": "cmd+g cmd+n",
				"command": "editor.action.marker.next",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+x `",
				"command": "editor.action.marker.next",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+g p",
				"command": "editor.action.marker.prev",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g p",
				"mac": "cmd+g p",
				"command": "editor.action.marker.prev",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+p",
				"command": "editor.action.marker.prev",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+g alt+p",
				"mac": "cmd+g cmd+p",
				"command": "editor.action.marker.prev",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+l",
				"command": "emacs-mcx.recenterTopBottom",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+s",
				"command": "emacs-mcx.isearchForward",
				"when": "!findInputFocussed"
			},
			{
				"key": "ctrl+s",
				"command": "editor.action.nextMatchFindAction",
				"when": "findInputFocussed"
			},
			{
				"key": "ctrl+r",
				"command": "emacs-mcx.isearchBackward",
				"when": "!findInputFocussed"
			},
			{
				"key": "ctrl+r",
				"command": "editor.action.previousMatchFindAction",
				"when": "findInputFocussed"
			},
			{
				"key": "alt+shift+5",
				"command": "editor.action.startFindReplaceAction",
				"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+shift+5",
				"mac": "cmd+shift+5",
				"command": "editor.action.startFindReplaceAction",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape shift+5",
				"command": "editor.action.startFindReplaceAction",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ shift+5",
				"command": "editor.action.startFindReplaceAction",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+f",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+b",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+p",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+n",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+a",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+e",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+f",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+b",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+m",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+d",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+h",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+d",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+k",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+w",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+w",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+y",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+y",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+m",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+j",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+l",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+u",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "alt+backspace",
				"when": "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+f",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+b",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+p",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+n",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+a",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+e",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+f",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+b",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+m",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+d",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+h",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+d",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+k",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+w",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+w",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+y",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+y",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+m",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+j",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+l",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+u",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "alt+backspace",
				"when": "isWindows && replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+alt+n",
				"command": "emacs-mcx.addSelectionToNextFindMatch",
				"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+n",
				"mac": "ctrl+cmd+n",
				"command": "emacs-mcx.addSelectionToNextFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+n",
				"command": "emacs-mcx.addSelectionToNextFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+n",
				"command": "emacs-mcx.addSelectionToNextFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+alt+p",
				"command": "emacs-mcx.addSelectionToPreviousFindMatch",
				"when": "editorFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+p",
				"mac": "ctrl+cmd+p",
				"command": "emacs-mcx.addSelectionToPreviousFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+p",
				"command": "emacs-mcx.addSelectionToPreviousFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+p",
				"command": "emacs-mcx.addSelectionToPreviousFindMatch",
				"when": "editorFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+d",
				"command": "emacs-mcx.deleteForwardChar",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+h",
				"command": "emacs-mcx.deleteBackwardChar",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "alt+d",
				"command": "emacs-mcx.killWord",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+d",
				"mac": "cmd+d",
				"command": "emacs-mcx.killWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape d",
				"command": "emacs-mcx.killWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ d",
				"command": "emacs-mcx.killWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+backspace",
				"command": "emacs-mcx.backwardKillWord",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+backspace",
				"mac": "cmd+backspace",
				"command": "emacs-mcx.backwardKillWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape backspace",
				"command": "emacs-mcx.backwardKillWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ backspace",
				"command": "emacs-mcx.backwardKillWord",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+k",
				"command": "emacs-mcx.killLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+shift+backspace",
				"command": "emacs-mcx.killWholeLine",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+w",
				"command": "emacs-mcx.killRegion",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+w",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "alt+w",
				"command": "emacs-mcx.copyRegion",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+w",
				"mac": "cmd+w",
				"command": "emacs-mcx.copyRegion",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape w",
				"command": "emacs-mcx.copyRegion",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ w",
				"command": "emacs-mcx.copyRegion",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+w",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+w",
				"mac": "cmd+w",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape w",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ w",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+y",
				"command": "emacs-mcx.yank",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+y",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "alt+y",
				"command": "emacs-mcx.yank-pop",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+y",
				"mac": "cmd+y",
				"command": "emacs-mcx.yank-pop",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape y",
				"command": "emacs-mcx.yank-pop",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ y",
				"command": "emacs-mcx.yank-pop",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+y",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+y",
				"mac": "cmd+y",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape y",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ y",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+o",
				"command": "lineBreakInsert",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+o",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "ctrl+m",
				"command": "emacs-mcx.newLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+m",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "ctrl+j",
				"command": "emacs-mcx.newLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+j",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "ctrl+x ctrl+o",
				"command": "emacs-mcx.deleteBlankLines",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+x ctrl+o",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "emacs-mcx.deleteBlankLines"
				}
			},
			{
				"key": "ctrl+x h",
				"command": "editor.action.selectAll",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x h",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "editor.action.selectAll"
				}
			},
			{
				"key": "ctrl+x u",
				"command": "undo",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+/",
				"command": "undo",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+shift+-",
				"command": "undo",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+x u",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "undo"
				}
			},
			{
				"key": "ctrl+/",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "undo"
				}
			},
			{
				"key": "ctrl+shift+-",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "undo"
				}
			},
			{
				"key": "ctrl+;",
				"command": "editor.action.commentLine",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "ctrl+;",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing",
				"args": {
					"then": "editor.action.commentLine"
				}
			},
			{
				"key": "alt+;",
				"command": "editor.action.blockComment",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+;",
				"mac": "cmd+;",
				"command": "editor.action.blockComment",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ;",
				"command": "editor.action.blockComment",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ;",
				"command": "editor.action.blockComment",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+;",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "editor.action.blockComment"
				}
			},
			{
				"key": "alt+;",
				"mac": "cmd+;",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": {
					"then": "editor.action.blockComment"
				}
			},
			{
				"key": "escape ;",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixEscape",
				"args": {
					"then": "editor.action.blockComment"
				}
			},
			{
				"key": "ctrl+[ ;",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !isComposing && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": {
					"then": "editor.action.blockComment"
				}
			},
			{
				"key": "ctrl+x ctrl+l",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "alt+l",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+l",
				"mac": "cmd+l",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape l",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ l",
				"command": "emacs-mcx.transformToLowercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+x ctrl+u",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"key": "alt+u",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+u",
				"mac": "cmd+u",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape u",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ u",
				"command": "emacs-mcx.transformToUppercase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+c",
				"command": "emacs-mcx.transformToTitlecase",
				"when": "editorTextFocus && !editorReadonly && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+c",
				"mac": "cmd+c",
				"command": "emacs-mcx.transformToTitlecase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape c",
				"command": "emacs-mcx.transformToTitlecase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ c",
				"command": "emacs-mcx.transformToTitlecase",
				"when": "editorTextFocus && !editorReadonly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+shift+6",
				"command": "emacs-mcx.executeCommands",
				"when": "editorTextFocus && !editorReadOnly && !config.emacs-mcx.useMetaPrefixMacCmd",
				"args": [
					"emacs-mcx.previousLine",
					"editor.action.joinLines"
				]
			},
			{
				"key": "alt+shift+6",
				"mac": "cmd+shift+6",
				"command": "emacs-mcx.executeCommands",
				"when": "editorTextFocus && !editorReadOnly && config.emacs-mcx.useMetaPrefixMacCmd",
				"args": [
					"emacs-mcx.previousLine",
					"editor.action.joinLines"
				]
			},
			{
				"key": "escape shift+6",
				"command": "emacs-mcx.executeCommands",
				"when": "editorTextFocus && !editorReadOnly && config.emacs-mcx.useMetaPrefixEscape",
				"args": [
					"emacs-mcx.previousLine",
					"editor.action.joinLines"
				]
			},
			{
				"key": "ctrl+[ shift+6",
				"command": "emacs-mcx.executeCommands",
				"when": "editorTextFocus && !editorReadOnly && config.emacs-mcx.useMetaPrefixCtrlLeftBracket",
				"args": [
					"emacs-mcx.previousLine",
					"editor.action.joinLines"
				]
			},
			{
				"key": "escape",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus && editorHasSelection && !config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "escape",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus && editorHasMultipleSelections && !config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+g",
				"command": "emacs-mcx.cancel",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+g",
				"command": "emacs-mcx.isearchAbort",
				"when": "editorFocus && findWidgetVisible && !isComposing"
			},
			{
				"key": "enter",
				"command": "emacs-mcx.isearchExit",
				"when": "editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing"
			},
			{
				"key": "ctrl+g",
				"command": "closeReferenceSearchEditor",
				"when": "inReferenceSearchEditor && !config.editor.stablePeek"
			},
			{
				"key": "ctrl+g",
				"command": "closeReferenceSearch",
				"when": "referenceSearchVisible && !config.editor.stablePeek"
			},
			{
				"key": "ctrl+g",
				"command": "closeBreakpointWidget",
				"when": "breakpointWidgetVisible && editorFocus"
			},
			{
				"key": "ctrl+g",
				"command": "leaveSnippet",
				"when": "editorTextFocus && inSnippetMode"
			},
			{
				"key": "ctrl+g",
				"command": "closeMarkersNavigation",
				"when": "editorFocus && markersNavigationVisible"
			},
			{
				"key": "ctrl+g",
				"command": "closeParameterHints",
				"when": "editorTextFocus && parameterHintsVisible"
			},
			{
				"key": "ctrl+g",
				"command": "hideSuggestWidget",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "ctrl+g",
				"command": "cancelRenameInput",
				"when": "editorFocus && renameInputVisible"
			},
			{
				"key": "ctrl+g",
				"command": "closeAccessibilityHelp",
				"when": "accessibilityHelpWidgetVisible && editorFocus"
			},
			{
				"key": "ctrl+g",
				"command": "closeReplaceInFilesWidget",
				"when": "replaceInputBoxFocus && searchViewletVisible"
			},
			{
				"key": "ctrl+g",
				"command": "workbench.action.closeMessages",
				"when": "globalMessageVisible"
			},
			{
				"key": "ctrl+g",
				"command": "workbench.action.closeQuickOpen",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+space",
				"command": "emacs-mcx.setMarkCommand",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+shift+2",
				"command": "emacs-mcx.setMarkCommand",
				"when": "editorTextFocus"
			},
			{
				"key": "escape space",
				"command": "emacs-mcx.setMarkCommand",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+x ctrl+x",
				"command": "emacs-mcx.exchangePointAndMark",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x space",
				"command": "emacs-mcx.rectangleMarkMode",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x r",
				"command": "emacs-mcx.startRectCommand",
				"when": "editorTextFocus"
			},
			{
				"key": "k",
				"command": "emacs-mcx.killRectangle",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
			},
			{
				"key": "y",
				"command": "emacs-mcx.yankRectangle",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
			},
			{
				"key": "d",
				"command": "emacs-mcx.deleteRectangle",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
			},
			{
				"key": "alt+w",
				"command": "emacs-mcx.copyRectangleAsKill",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+w",
				"mac": "cmd+w",
				"command": "emacs-mcx.copyRectangleAsKill",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape w",
				"command": "emacs-mcx.copyRectangleAsKill",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ w",
				"command": "emacs-mcx.copyRectangleAsKill",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "o",
				"command": "emacs-mcx.openRectangle",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
			},
			{
				"key": "c",
				"command": "emacs-mcx.clearRectangle",
				"when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
			},
			{
				"key": " ",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					" "
				]
			},
			{
				"key": "!",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"!"
				]
			},
			{
				"key": "\"",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"\""
				]
			},
			{
				"key": "#",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"#"
				]
			},
			{
				"key": "$",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"$"
				]
			},
			{
				"key": "%",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"%"
				]
			},
			{
				"key": "&",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"&"
				]
			},
			{
				"key": "'",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"'"
				]
			},
			{
				"key": "(",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"("
				]
			},
			{
				"key": ")",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					")"
				]
			},
			{
				"key": "*",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"*"
				]
			},
			{
				"key": "+",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"+"
				]
			},
			{
				"key": ",",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					","
				]
			},
			{
				"key": "-",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"-"
				]
			},
			{
				"key": ".",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"."
				]
			},
			{
				"key": "/",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"/"
				]
			},
			{
				"key": "0",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"0"
				]
			},
			{
				"key": "1",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"1"
				]
			},
			{
				"key": "2",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"2"
				]
			},
			{
				"key": "3",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"3"
				]
			},
			{
				"key": "4",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"4"
				]
			},
			{
				"key": "5",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"5"
				]
			},
			{
				"key": "6",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"6"
				]
			},
			{
				"key": "7",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"7"
				]
			},
			{
				"key": "8",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"8"
				]
			},
			{
				"key": "9",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"9"
				]
			},
			{
				"key": ":",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					":"
				]
			},
			{
				"key": ";",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					";"
				]
			},
			{
				"key": "<",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"<"
				]
			},
			{
				"key": "=",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"="
				]
			},
			{
				"key": ">",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					">"
				]
			},
			{
				"key": "?",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"?"
				]
			},
			{
				"key": "@",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"@"
				]
			},
			{
				"key": "A",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"A"
				]
			},
			{
				"key": "B",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"B"
				]
			},
			{
				"key": "C",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"C"
				]
			},
			{
				"key": "D",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"D"
				]
			},
			{
				"key": "E",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"E"
				]
			},
			{
				"key": "F",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"F"
				]
			},
			{
				"key": "G",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"G"
				]
			},
			{
				"key": "H",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"H"
				]
			},
			{
				"key": "I",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"I"
				]
			},
			{
				"key": "J",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"J"
				]
			},
			{
				"key": "K",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"K"
				]
			},
			{
				"key": "L",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"L"
				]
			},
			{
				"key": "M",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"M"
				]
			},
			{
				"key": "N",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"N"
				]
			},
			{
				"key": "O",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"O"
				]
			},
			{
				"key": "P",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"P"
				]
			},
			{
				"key": "Q",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Q"
				]
			},
			{
				"key": "R",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"R"
				]
			},
			{
				"key": "S",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"S"
				]
			},
			{
				"key": "T",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"T"
				]
			},
			{
				"key": "U",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"U"
				]
			},
			{
				"key": "V",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"V"
				]
			},
			{
				"key": "W",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"W"
				]
			},
			{
				"key": "X",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"X"
				]
			},
			{
				"key": "Y",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Y"
				]
			},
			{
				"key": "Z",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"Z"
				]
			},
			{
				"key": "[",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"["
				]
			},
			{
				"key": "\\",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"\\"
				]
			},
			{
				"key": "]",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"]"
				]
			},
			{
				"key": "^",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"^"
				]
			},
			{
				"key": "_",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"_"
				]
			},
			{
				"key": "`",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"`"
				]
			},
			{
				"key": "a",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"a"
				]
			},
			{
				"key": "b",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"b"
				]
			},
			{
				"key": "c",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"c"
				]
			},
			{
				"key": "d",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"d"
				]
			},
			{
				"key": "e",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"e"
				]
			},
			{
				"key": "f",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"f"
				]
			},
			{
				"key": "g",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"g"
				]
			},
			{
				"key": "h",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"h"
				]
			},
			{
				"key": "i",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"i"
				]
			},
			{
				"key": "j",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"j"
				]
			},
			{
				"key": "k",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"k"
				]
			},
			{
				"key": "l",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"l"
				]
			},
			{
				"key": "m",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"m"
				]
			},
			{
				"key": "n",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"n"
				]
			},
			{
				"key": "o",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"o"
				]
			},
			{
				"key": "p",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"p"
				]
			},
			{
				"key": "q",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"q"
				]
			},
			{
				"key": "r",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"r"
				]
			},
			{
				"key": "s",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"s"
				]
			},
			{
				"key": "t",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"t"
				]
			},
			{
				"key": "u",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"u"
				]
			},
			{
				"key": "v",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"v"
				]
			},
			{
				"key": "w",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"w"
				]
			},
			{
				"key": "x",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"x"
				]
			},
			{
				"key": "y",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"y"
				]
			},
			{
				"key": "z",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"z"
				]
			},
			{
				"key": "{",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"{"
				]
			},
			{
				"key": "|",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"|"
				]
			},
			{
				"key": "}",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"}"
				]
			},
			{
				"key": "~",
				"when": "emacs-mcx.inRectMarkMode && editorTextFocus && !editorReadonly",
				"command": "emacs-mcx.typeChar",
				"args": [
					"~"
				]
			},
			{
				"key": "ctrl+'",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+'",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible"
			},
			{
				"key": "alt+/",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+/",
				"mac": "cmd+/",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape /",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ /",
				"command": "editor.action.triggerSuggest",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+/",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+/",
				"mac": "cmd+/",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape /",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ /",
				"command": "toggleSuggestionDetails",
				"when": "editorTextFocus && suggestWidgetVisible && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "alt+x",
				"command": "workbench.action.showCommands",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "alt+x",
				"mac": "cmd+x",
				"command": "workbench.action.showCommands",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape x",
				"command": "workbench.action.showCommands",
				"when": "config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ x",
				"command": "workbench.action.showCommands",
				"when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+alt+space",
				"command": "workbench.action.toggleSidebarVisibility",
				"when": "!config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+space",
				"mac": "ctrl+cmd+space",
				"command": "workbench.action.toggleSidebarVisibility",
				"when": "config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+space",
				"command": "workbench.action.toggleSidebarVisibility",
				"when": "config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+space",
				"command": "workbench.action.toggleSidebarVisibility",
				"when": "config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+x ctrl+c",
				"command": "workbench.action.closeWindow"
			},
			{
				"key": "ctrl+x z",
				"command": "workbench.action.toggleZenMode",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x ctrl+f",
				"command": "workbench.action.quickOpen",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x ctrl+s",
				"command": "workbench.action.files.save",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x ctrl+w",
				"command": "workbench.action.files.saveAs",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x s",
				"command": "workbench.action.files.saveAll",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x ctrl+n",
				"command": "workbench.action.newWindow",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x b",
				"command": "workbench.action.showAllEditorsByMostRecentlyUsed",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x k",
				"command": "workbench.action.closeActiveEditor",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x ctrl-k",
				"command": "workbench.action.closeAllEditors",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x 0",
				"command": "workbench.action.closeEditorsInGroup",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x 1",
				"command": "workbench.action.closeEditorsInOtherGroups",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x 2",
				"command": "workbench.action.splitEditorDown",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x 3",
				"command": "workbench.action.splitEditorRight",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x 4",
				"command": "workbench.action.toggleEditorGroupLayout",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+x o",
				"command": "workbench.action.navigateEditorGroups",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+alt+f",
				"command": "emacs-mcx.paredit.forwardSexp",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+f",
				"mac": "ctrl+cmd+f",
				"command": "emacs-mcx.paredit.forwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+f",
				"command": "emacs-mcx.paredit.forwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+f",
				"command": "emacs-mcx.paredit.forwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+alt+b",
				"command": "emacs-mcx.paredit.backwardSexp",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+b",
				"mac": "ctrl+cmd+b",
				"command": "emacs-mcx.paredit.backwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+b",
				"command": "emacs-mcx.paredit.backwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+b",
				"command": "emacs-mcx.paredit.backwardSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+alt+k",
				"command": "emacs-mcx.paredit.killSexp",
				"when": "editorTextFocus && !config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "ctrl+alt+k",
				"mac": "ctrl+cmd+k",
				"command": "emacs-mcx.paredit.killSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixMacCmd"
			},
			{
				"key": "escape ctrl+k",
				"command": "emacs-mcx.paredit.killSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
			},
			{
				"key": "ctrl+[ ctrl+k",
				"command": "emacs-mcx.paredit.killSexp",
				"when": "editorTextFocus && config.emacs-mcx.useMetaPrefixCtrlLeftBracket"
			},
			{
				"key": "ctrl+p",
				"command": "selectPrevQuickFix",
				"when": "editorFocus && quickFixWidgetVisible"
			},
			{
				"key": "ctrl+n",
				"command": "selectNextQuickFix",
				"when": "editorFocus && quickFixWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "workbench.action.quickOpenSelectPrevious",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+n",
				"command": "workbench.action.quickOpenSelectNext",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+m",
				"command": "workbench.action.acceptSelectedQuickOpenItem",
				"when": "inQuickOpen"
			},
			{
				"key": "ctrl+shift+'",
				"command": "editor.action.triggerParameterHints",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+x j",
				"command": "workbench.action.togglePanel",
				"when": "!terminalFocus"
			},
			{
				"key": "ctrl+i",
				"command": "emacs-mcx.executeCommands",
				"args": [
					"emacs-mcx.forwardChar",
					"emacs-mcx.nextLine"
				]
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "yarn && yarn gen-keys && yarn webpack:prod",
		"webpack:dev": "webpack --mode development",
		"webpack:prod": "webpack --mode production",
		"webpack": "yarn webpack:dev",
		"test-compile": "ttsc -p ./",
		"gen-keys": "ts-node ./keybinding-generator/cli.ts",
		"test-gen-keys": "ts-mocha keybinding-generator/*.test.ts",
		"fix:prettier": "prettier --write \"src/**/*.ts\"",
		"fix:eslint": "eslint src --ext ts --fix",
		"check:prettier": "prettier --check \"src/**/*.ts\"",
		"check:eslint": "eslint src --ext ts",
		"pretest": "yarn run test-compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/expect": "^24.3.0",
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.2.2",
		"@types/node": "^15.6.1",
		"@types/sinon": "^10.0.1",
		"@types/vscode": "^1.51.0",
		"@typescript-eslint/eslint-plugin": "^4.25.0",
		"@typescript-eslint/parser": "^4.25.0",
		"eslint": "^7.27.0",
		"eslint-config-prettier": "^8.3.0",
		"expect": "^27.0.2",
		"glob": "^7.1.7",
		"mocha": "^8.4.0",
		"prettier": "^2.3.0",
		"sinon": "^11.1.1",
		"strip-json-comments": "^3.1.1",
		"ts-loader": "^9.2.2",
		"ts-mocha": "^8.0.0",
		"ts-node": "^10.0.0",
		"tsconfig-paths-webpack-plugin": "^3.5.1",
		"ttypescript": "^1.5.12",
		"typescript": "^4.3.2",
		"typescript-transform-paths": "^2.2.4",
		"vscode-test": "^1.5.2",
		"webpack": "^5.38.1",
		"webpack-cli": "^4.7.0"
	},
	"dependencies": {
		"paredit.js": "^0.3.4",
		"winston": "^3.3.3",
		"winston-console-for-electron": "^0.0.6"
	}
}
