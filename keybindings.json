{
  "keybindings": [
    // prefix argument
    {
      "key": "ctrl+u",
      "command": "emacs-mcx.universalArgument",
      "when": "editorTextFocus"
    },
    {
      "$special": "universalArgumentTypes"
    },
    // right
    {
      "keys": ["right", "ctrl+f"],
      "command": "emacs-mcx.forwardChar",
      "whens": ["editorTextFocus", "terminalFocus"]  // TODO: `!suggestWidgetVisible` should be added like up/down?
    },
    {
      "keys": ["right", "ctrl+f"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.forwardChar"
      }
    },
    // left
    {
      "keys": ["left", "ctrl+b"],
      "command": "emacs-mcx.backwardChar",
      "whens": ["editorTextFocus", "terminalFocus"]
    },
    {
      "keys": ["left", "ctrl+b"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.backwardChar"
      }
    },
    // up
    {
      "keys": ["up", "ctrl+p"],
      "command": "emacs-mcx.previousLine",
      "whens": ["editorTextFocus && !suggestWidgetVisible", "terminalFocus"]
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "selectPrevSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "showPrevParameterHint",
      "when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.previousLine"
      }
    },
    // down
    {
      "keys": ["down", "ctrl+n"],
      "command": "emacs-mcx.nextLine",
      "whens": ["editorTextFocus", "terminalFocus"]
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "selectNextSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "showNextParameterHint",
      "when": "parameterHintsMultipleSignatures && parameterHintsVisible && textInputFocus"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.nextLine"
      }
    },
    // home
    {
      "keys": ["home", "ctrl+a"],
      "command": "emacs-mcx.moveBeginningOfLine",
      "whens": ["editorTextFocus", "terminalFocus"]
    },
    {
      "keys": ["home", "ctrl+a"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.moveBeginningOfLine"
      }
    },
    // end
    {
      "keys": ["end", "ctrl+e"],
      "command": "emacs-mcx.moveEndOfLine",
      "whens": ["editorTextFocus", "terminalFocus"]
    },
    {
      "keys": ["end", "ctrl+e"],
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.moveEndOfLine"
      }
    },
    // forward word (meta + f)
    {
      "key": "meta+f",
      "command": "emacs-mcx.forwardWord",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+f",
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.forwardWord"
      }
    },
    // backward word (meta + b)
    {
      "key": "meta+b",
      "command": "emacs-mcx.backwardWord",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+b",
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing",
      "args": {
        "then": "emacs-mcx.backwardWord"
      }
    },
    // back-to-indentation (meta + m)
    {
      "key": "meta+m",
      "command": "emacs-mcx.backToIndentation",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+m",
      "command": "emacs-mcx.isearchExit",
      "when": "!config.emacs-mcx.cursorMoveOnFindWidget && editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "emacs-mcx.backToIndentation"
      }
    },
    // page down (ctrl + v)
    {
      "keys": ["pagedown", "ctrl+v"],
      "command": "emacs-mcx.scrollUpCommand",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    {
      "keys": ["pagedown", "ctrl+v"],
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "emacs-mcx.scrollUpCommand"
      }
    },
    // page up (meta + v)
    {
      "keys": ["pageup", "meta+v"],
      "command": "emacs-mcx.scrollDownCommand",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    {
      "keys": ["pageup", "meta+v"],
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "emacs-mcx.scrollDownCommand"
      }
    },
    // backward paragraph (meta + shift + [)
    {
      "key": "meta+shift+[",
      "command": "emacs-mcx.backwardParagraph",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    // forward paragraph (meta + shift + ])
    {
      "key": "meta+shift+]",
      "command": "emacs-mcx.forwardParagraph",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    // end of buffer (meta + >)
    {
      "key": "meta+shift+.",
      "command": "emacs-mcx.endOfBuffer",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+shift+.",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then":"emacs-mcx.endOfBuffer"
      }
    },
    // beginning of buffer (meta + <)
    {
      "key": "meta+shift+,",
      "command": "emacs-mcx.beginningOfBuffer",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+shift+,",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "emacs-mcx.beginningOfBuffer"
      }
    },
    // go to line
    {
      "keys": ["meta+g meta+g", "meta+g g"],
      "command": "workbench.action.gotoLine"
    },
    {
      "keys": ["meta+g meta+g", "meta+g g"],
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "workbench.action.gotoLine"
      }
    },
    {
      "key": "escape g",
      "command": "workbench.action.gotoLine",
      "when": "config.emacs-mcx.useMetaPrefixEscape"
    },
    // marker next
    {
      "keys": ["meta+g n", "meta+g meta+n"],
      "command": "editor.action.marker.next"
    },
    {
      "key": "ctrl+x `",
      "command": "editor.action.marker.next",
      "when": "editorTextFocus"
    },
    // marker prev
    {
      "keys": ["meta+g p", "meta+g meta+p"],
      "command": "editor.action.marker.prev"
    },
    // recenter-top-bottom
    {
      "key": "ctrl+l",
      "command": "emacs-mcx.recenterTopBottom",
      "when": "editorTextFocus"
    },
    // i-search forward
    {
      "key": "ctrl+s",
      "command": "emacs-mcx.isearchForward",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+s",
      "command": "editor.action.nextMatchFindAction",
      "when": "findInputFocussed"
    },
    // i-search backward
    {
      "key": "ctrl+r",
      "command": "emacs-mcx.isearchBackward",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+r",
      "command": "editor.action.previousMatchFindAction",
      "when": "findInputFocussed"
    },
    // replace
    {
      "key": "meta+shift+5",
      "command": "editor.action.startFindReplaceAction",
      "when": "editorFocus"
    },
    // Disable Emacs-like keybindings on the find and replace widgets (native UI).
    // See https://github.com/whitphx/vscode-emacs-mcx/issues/55
    {
      "keys": [
        "ctrl+f",
        "ctrl+b",
        "ctrl+p",
        "ctrl+n",
        "ctrl+a",
        "ctrl+e",
        "alt+f",
        "alt+b",
        "alt+m",
        "ctrl+d",
        "ctrl+h",
        "alt+d",
        "ctrl+k",
        "ctrl+w",
        "alt+w",
        "ctrl+y",
        "alt+y",
        "ctrl+m",
        "ctrl+j",
        "alt+l",
        "alt+u",
        "alt+backspace"
      ],
      "whens": [
        "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing",
        "isWindows && replaceInputFocussed && !isComposing"
      ]
    },
    // addSelectionToNext/PreviousFindMatch
    {
      "key": "ctrl+meta+n",
      "command": "emacs-mcx.addSelectionToNextFindMatch",
      "when": "editorFocus"
    },
    {
      "key": "ctrl+meta+p",
      "command": "emacs-mcx.addSelectionToPreviousFindMatch",
      "when": "editorFocus"
    },
    ////////
    // Edit commands
    ////////
    {
      "key": "ctrl+d",
      "command": "emacs-mcx.deleteForwardChar",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+h",
      "command": "emacs-mcx.deleteBackwardChar",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+d",
      "command": "emacs-mcx.killWord",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+backspace",
      "command": "emacs-mcx.backwardKillWord",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+k",
      "command": "emacs-mcx.killLine",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+shift+backspace",
      "command": "emacs-mcx.killWholeLine",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+w",
      "command": "emacs-mcx.killRegion",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+w",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "meta+w",
      "command": "emacs-mcx.copyRegion",
      "when": "editorTextFocus"
    },
    {
      // TODO: This behavior is different from the original one.
      "key": "meta+w",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "ctrl+y",
      "command": "emacs-mcx.yank",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+y",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "meta+y",
      "command": "emacs-mcx.yank-pop",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+y",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },{
      "key": "ctrl+o",
      "command": "lineBreakInsert",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+o",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "ctrl+m",
      "command": "emacs-mcx.newLine",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+m",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "ctrl+j",
      "command": "emacs-mcx.newLine",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+j",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "ctrl+x ctrl+o",
      "command": "emacs-mcx.deleteBlankLines",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+x ctrl+o",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "emacs-mcx.deleteBlankLines"
      }
    },
    {
      "key": "ctrl+x h",
      "command": "editor.action.selectAll",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x h",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then":"editor.action.selectAll"
      }
    },
    {
      "keys": ["ctrl+x u", "ctrl+/", "ctrl+shift+-"],
      "command": "undo",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "keys": ["ctrl+x u", "ctrl+/", "ctrl+shift+-"],
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "undo"
      }
    },
    {
      "key": "ctrl+;",
      "command": "editor.action.commentLine",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+;",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "editor.action.commentLine"
      }
    },
    {
      "key": "meta+;",
      "command": "editor.action.blockComment",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+;",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !isComposing",
      "args": {
        "then": "editor.action.blockComment"
      }
    },
    {
      "key": "ctrl+x ctrl+l",
      "command": "emacs-mcx.transformToLowercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+l",
      "command": "emacs-mcx.transformToLowercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+x ctrl+u",
      "command": "emacs-mcx.transformToUppercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+u",
      "command": "emacs-mcx.transformToUppercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+c",
      "command": "emacs-mcx.transformToTitlecase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+shift+6",
      "command": "emacs-mcx.executeCommands",
      "when": "editorTextFocus && !editorReadOnly",
      "args": [
        "emacs-mcx.previousLine",
        "editor.action.joinLines"
      ]
    },
    // Cancel
    {
      "key": "escape",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus && editorHasSelection && !config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "escape",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus && editorHasMultipleSelections && !config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "ctrl+g",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+g",
      "command": "emacs-mcx.isearchAbort",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key":  "enter",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findWidgetVisible && !replaceInputFocussed && !isComposing"
    },
    {
      "key": "ctrl+g",
      "command": "closeReferenceSearchEditor",
      "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
      "key": "ctrl+g",
      "command": "closeReferenceSearch",
      "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
      "key": "ctrl+g",
      "command": "closeBreakpointWidget",
      "when": "breakpointWidgetVisible && editorFocus"
    },
    {
      "key": "ctrl+g",
      "command": "leaveSnippet",
      "when": "editorTextFocus && inSnippetMode"
    },
    {
      "key": "ctrl+g",
      "command": "closeMarkersNavigation",
      "when": "editorFocus && markersNavigationVisible"
    },
    {
      "key": "ctrl+g",
      "command": "closeParameterHints",
      "when": "editorTextFocus && parameterHintsVisible"
    },
    {
      "key": "ctrl+g",
      "command": "hideSuggestWidget",
      "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
      "key": "ctrl+g",
      "command": "cancelRenameInput",
      "when": "editorFocus && renameInputVisible"
    },
    {
      "key": "ctrl+g",
      "command": "closeAccessibilityHelp",
      "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
      "key": "ctrl+g",
      "command": "closeReplaceInFilesWidget",
      "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
      "key": "ctrl+g",
      "command": "workbench.action.closeMessages",
      "when": "globalMessageVisible"
    },
    {
      "key": "ctrl+g",
      "command": "workbench.action.closeQuickOpen",
      "when": "inQuickOpen"
    },
    // Mark mode
    {
      "keys": ["ctrl+space", "ctrl+shift+2"],
      "command": "emacs-mcx.setMarkCommand",
      "when": "editorTextFocus"
    },
    {
      "key": "escape space",
      "command": "emacs-mcx.setMarkCommand",
      "when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "ctrl+x ctrl+x",
      "command": "emacs-mcx.exchangePointAndMark",
      "when": "editorTextFocus"
    },
    // Rectangle Mark Mode
    {
      "key": "ctrl+x space",
      "command": "emacs-mcx.rectangleMarkMode",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x r",
      "command": "emacs-mcx.startRectCommand",
      "when": "editorTextFocus"
    },
    {
      "key": "k",  // ctrl+x r k
      "command": "emacs-mcx.killRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "y",  // ctrl+x r y
      "command": "emacs-mcx.yankRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "d",  // ctrl+x r d
      "command": "emacs-mcx.deleteRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "meta+w",  // ctrl+x r M-w
      "command": "emacs-mcx.copyRectangleAsKill",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "c",  // ctrl+x r c
      "command": "emacs-mcx.clearRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "$special": "rectMarkModeTypes"
    },
    // Suggestion
    {
      "key": "ctrl+'",
      "command": "editor.action.triggerSuggest",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+'",
      "command": "toggleSuggestionDetails",
      "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
      "key": "meta+/",
      "command": "editor.action.triggerSuggest",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+/",
      "command": "toggleSuggestionDetails",
      "when": "editorTextFocus && suggestWidgetVisible"
    },
    // Show commands
    {
      "key": "meta+x",
      "command": "workbench.action.showCommands"
    },
    // Sidebar
    {
      "key": "ctrl+meta+space",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    // Workspace
    {
      "key": "ctrl+x ctrl+c",
      "command": "workbench.action.closeWindow"
    },
    {
      "key": "ctrl+x z",
      "command": "workbench.action.toggleZenMode",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+f",
      "command": "workbench.action.quickOpen",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+s",
      "command": "workbench.action.files.save",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+w",
      "command": "workbench.action.files.saveAs",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x s",
      "command": "workbench.action.files.saveAll",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+n",
      "command": "workbench.action.newWindow",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x b",
      "command": "workbench.action.showAllEditorsByMostRecentlyUsed",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x k",
      "command": "workbench.action.closeActiveEditor",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl-k",
      "command": "workbench.action.closeAllEditors",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 0",
      "command": "workbench.action.closeEditorsInGroup",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 1",
      "command": "workbench.action.closeEditorsInOtherGroups",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 2",
      "command": "workbench.action.splitEditorDown",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 3",
      "command": "workbench.action.splitEditorRight",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 4",
      "command": "workbench.action.toggleEditorGroupLayout",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x o",
      "command": "workbench.action.navigateEditorGroups",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+meta+f",
      "command": "emacs-mcx.paredit.forwardSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+b",
      "command": "emacs-mcx.paredit.backwardSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+k",
      "command": "emacs-mcx.paredit.killSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+p",
      "command": "selectPrevQuickFix",
      "when": "editorFocus && quickFixWidgetVisible"
    },
    {
      "key": "ctrl+n",
      "command": "selectNextQuickFix",
      "when": "editorFocus && quickFixWidgetVisible"
    },
    {
      "key": "ctrl+p",
      "command": "workbench.action.quickOpenSelectPrevious",
      "when": "inQuickOpen"
    },
    {
      "key": "ctrl+n",
      "command": "workbench.action.quickOpenSelectNext",
      "when": "inQuickOpen"
    },
    {
      "key": "ctrl+m",
      "command": "workbench.action.acceptSelectedQuickOpenItem",
      "when": "inQuickOpen"
    },
    {
      "key": "ctrl+shift+'",
      "command": "editor.action.triggerParameterHints",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x j",
      "command": "workbench.action.togglePanel",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+i",
      "command": "emacs-mcx.executeCommands",
      "args": [
        "emacs-mcx.forwardChar",
        "emacs-mcx.nextLine"
      ]
    }
  ]
}
