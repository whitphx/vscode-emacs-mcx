{
  "keybindings": [
    // prefix argument
    {
      "key": "ctrl+u",
      "command": "emacs-mcx.universalArgument",
      "when": "editorTextFocus"
    },
    {
      "$special": "universalArgumentTypes"
    },
    // right
    {
      "keys": ["right", "ctrl+f"],
      "command": "emacs-mcx.forwardChar",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // left
    {
      "keys": ["left", "ctrl+b"],
      "command": "emacs-mcx.backwardChar",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // up
    {
      "keys": ["up", "ctrl+p"],
      "command": "emacs-mcx.previousLine",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // down
    {
      "keys": ["down", "ctrl+n"],
      "command": "emacs-mcx.nextLine",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // home
    {
      "keys": ["home", "ctrl+a"],
      "command": "emacs-mcx.moveBeginningOfLine",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // end
    {
      "keys": ["end", "ctrl+e"],
      "command": "emacs-mcx.moveEndOfLine",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // forward word (meta + f)
    {
      "key": "meta+f",
      "command": "emacs-mcx.forwardWord",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // backward word (meta + b)
    {
      "key": "meta+b",
      "command": "emacs-mcx.backwardWord",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // right-word (ctrl + <right>)
    // In left-to-right languages, right-word is same as forward-word, and VSCode is not supporting RTL now.
    // Ref: https://github.com/whitphx/vscode-emacs-mcx/issues/775#issuecomment-1326595172
    {
      "keys": ["ctrl+right", "meta+right"],
      "command": "emacs-mcx.forwardWord",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // left word (ctrl + <left>)
    // In left-to-right languages, left-word is same as backward-word, and VSCode is not supporting RTL now.
    // Ref: https://github.com/whitphx/vscode-emacs-mcx/issues/775#issuecomment-1326595172
    {
      "keys": ["ctrl+left", "meta+left"],
      "command": "emacs-mcx.backwardWord",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // back-to-indentation (meta + m)
    {
      "key": "meta+m",
      "command": "emacs-mcx.backToIndentation",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // page down (ctrl + v)
    {
      "keys": ["pagedown", "ctrl+v"],
      "command": "emacs-mcx.scrollUpCommand",
      "when": "editorTextFocus && !suggestWidgetVisible",
      "isearchInterruptible": true
    },
    // page up (meta + v)
    {
      "keys": ["pageup", "meta+v"],
      "command": "emacs-mcx.scrollDownCommand",
      "when": "editorTextFocus && !suggestWidgetVisible",
      "isearchInterruptible": true
    },
    // backward paragraph (meta + shift + [)
    {
      "keys": ["meta+shift+[", "ctrl+up"],
      "command": "emacs-mcx.backwardParagraph",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    // forward paragraph (meta + shift + ])
    {
      "keys": ["meta+shift+]", "ctrl+down"],
      "command": "emacs-mcx.forwardParagraph",
      "when": "editorTextFocus && !suggestWidgetVisible"
    },
    // end of buffer (meta + >)
    {
      "key": "meta+shift+.",
      "command": "emacs-mcx.endOfBuffer",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // beginning of buffer (meta + <)
    {
      "key": "meta+shift+,",
      "command": "emacs-mcx.beginningOfBuffer",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    // move-to-window-line-top-bottom
    {
      "key": "meta+r",
      "command": "emacs-mcx.moveToWindowLineTopBottom",
      "when": "editorTextFocus"
    },
    // go to line
    {
      "keys": ["meta+g meta+g", "meta+g g"],
      "command": "emacs-mcx.gotoLine",
      "when": "!terminalFocus",
      "isearchInterruptible": true
    },
    {
      "key": "escape g",
      "command": "emacs-mcx.gotoLine",
      "when": "config.emacs-mcx.useMetaPrefixEscape"
    },
    // marker next
    {
      "keys": ["meta+g n", "meta+g meta+n"],
      "command": "editor.action.marker.next",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x `",
      "command": "editor.action.marker.next",
      "when": "editorTextFocus"
    },
    // marker prev
    {
      "keys": ["meta+g p", "meta+g meta+p"],
      "command": "editor.action.marker.prev",
      "when": "editorTextFocus"
    },
    // recenter-top-bottom
    {
      "key": "ctrl+l",
      "command": "emacs-mcx.recenterTopBottom",
      "when": "editorTextFocus"
    },
    // i-search forward
    {
      "key": "ctrl+s",
      "command": "emacs-mcx.isearchForward",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+s",
      "command": "editor.action.nextMatchFindAction",
      "when": "findInputFocussed"
    },
    // i-search backward
    {
      "key": "ctrl+r",
      "command": "emacs-mcx.isearchBackward",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+r",
      "command": "editor.action.previousMatchFindAction",
      "when": "findInputFocussed"
    },
    // On notebooks, only `notebook.find` is available so we can't use Emacs-like i-search.
    // As a fallback, we use `notebook.find` for `ctrl+s` and `ctrl+r`.
    {
      "keys": ["ctrl+s", "ctrl+r"],
      "command": "notebook.find",
      "when": "notebookEditorFocused && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && activeEditor == 'workbench.editor.notebook'"
    },
    // Terminal, ref: https://github.com/whitphx/vscode-emacs-mcx/issues/1319
    {
      "keys": [
        "ctrl+s"
        // "ctrl+r" // We don't assign `ctrl+r` to the terminal find command because usually it is already used as a shortcut in terminals.
      ],
      "command": "workbench.action.terminal.focusFind",
      "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
      "key": "ctrl+s",
      "command": "workbench.action.terminal.findNext",
      "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
      "key": "ctrl+r",
      "command": "workbench.action.terminal.findPrevious",
      "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
      "key": "ctrl+g",
      "command": "workbench.action.terminal.hideFind",
      "when": "terminalFindFocused"
    },
    {
      // Copied from the paste keybinding in the default keybindings.
      "key": "ctrl+y",
      "command": "workbench.action.terminal.paste",
      "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
      "key": "ctrl+w",
      "command": "workbench.action.terminal.copyAndClearSelection",  // There is no `cutSelection`. We believe this is a good alternative.
      "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
      // Copied from the copy keybinding in the default keybindings.
      "key": "meta+y",
      "command": "workbench.action.terminal.copySelection",
      "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
      "keys": ["ctrl+x 2", "ctrl+x 3"],  // VSCode terminal only supports horizontal split.
      "command": "workbench.action.terminal.splitActiveTab",
      "when": "terminalFocus"
    },
    {
      "key": "ctrl+x 0",
      "command": "workbench.action.terminal.unsplit",
      "when": "terminalFocus"
    },
    // Suggestions
    // Ref: https://company-mode.github.io/manual/Getting-Started.html
    {
      "keys": ["ctrl+meta+i", "meta+[Tab]"],
      "command": "workbench.action.terminal.requestCompletions",
      "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalProcessSupported && !terminalSuggestWidgetVisible"
    },
    {
      "keys": ["ctrl+p", "meta+p"],
      "command": "workbench.action.terminal.selectPrevSuggestion",
      "when": "simpleSuggestWidgetHasNavigated && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasNavigated && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible || terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && !config.terminal.integrated.suggest.upArrowNavigatesHistory"
    },
    {
      "keys": ["ctrl+n", "meta+n"],
      "command": "workbench.action.terminal.selectNextSuggestion",
      "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
      "key": "ctrl+h",
      "command": "workbench.action.terminal.suggestToggleDetails",
      "when": "simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || simpleSuggestWidgetHasFocusedSuggestion && terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    // Pass through or translate the sequences to the terminal.
    // These explicit definitions are necessary to override the default keybindings in VSCode that conflict with Emacs-like keybindings.
    {
      "key": "ctrl+f",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0006" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "ctrl+f",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[C" },
      "when": "terminalFocus && terminalShellType == 'pwsh'"
    },
    {
      "key": "ctrl+b",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0002" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "ctrl+b",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[D" },
      "when": "terminalFocus && terminalShellType == 'pwsh'"
    },
    {
      "key": "ctrl+p",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0010" },
      "when": "terminalFocus && terminalShellType != 'pwsh' && !terminalSuggestWidgetVisible"
    },
    {
      "key": "ctrl+p",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[A" },
      "when": "terminalFocus && terminalShellType == 'pwsh' && !terminalSuggestWidgetVisible"
    },
    {
      "key": "ctrl+n",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u000e" },
      "when": "terminalFocus && terminalShellType != 'pwsh' && !terminalSuggestWidgetVisible"
    },
    {
      "key": "ctrl+n",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[B" },
      "when": "terminalFocus && terminalShellType == 'pwsh' && !terminalSuggestWidgetVisible"
    },
    {
      "key": "ctrl+a",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0001" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "ctrl+a",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[H" },
      "when": "terminalFocus && terminalShellType == 'pwsh'"
    },
    {
      "key": "ctrl+e",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0005" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "ctrl+e",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u001b[F" },
      "when": "terminalFocus && terminalShellType == 'pwsh'"
    },
    {
      "key": "meta+f",
      "command": "workbench.action.terminal.sendSequence",
      "args": {"text":"\u001bf"},
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "meta+f",
      "command": "workbench.action.terminal.sendSequence",
      "args": {"text":"\u001b[1;5C"},
      "when": "terminalFocus && terminalShellType == 'pwsh'"
      },
    {
      "key": "meta+b",
      "command": "workbench.action.terminal.sendSequence",
      "args": {"text":"\u001bb"},
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "meta+b",
      "command": "workbench.action.terminal.sendSequence",
      "args": {"text":"\u001b[1;5D"},
      "when": "terminalFocus && terminalShellType == 'pwsh'"
    },
    {
      "key": "ctrl+k",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u000b" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    {
      "key": "ctrl+d",
      "command": "workbench.action.terminal.sendSequence",
      "args": { "text": "\u0004" },
      "when": "terminalFocus && terminalShellType != 'pwsh'"
    },
    // TODO: Automate defining such keybindings based on the default keybinding data.
    // i-search forward regexp
    {
      "key": "ctrl+meta+s",
      "command": "emacs-mcx.isearchForwardRegexp",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+meta+s",
      "command": "editor.action.nextMatchFindAction",
      "when": "findInputFocussed"
    },
    // i-search backward regexp
    {
      "key": "ctrl+meta+r",
      "command": "emacs-mcx.isearchBackwardRegexp",
      "when": "!findInputFocussed"
    },
    {
      "key": "ctrl+meta+r",
      "command": "editor.action.previousMatchFindAction",
      "when": "findInputFocussed"
    },
    // replace
    {
      "key": "meta+shift+5",
      "command": "emacs-mcx.queryReplace",
      "when": "editorFocus"
    },
    {
      "key": "ctrl+meta+shift+5",
      "command": "emacs-mcx.queryReplaceRegexp",
      "when": "editorFocus"
    },
    // Disable Emacs-like keybindings on the find and replace widgets (native UI).
    // See https://github.com/whitphx/vscode-emacs-mcx/issues/55
    {
      "keys": [
        "ctrl+f",
        "ctrl+b",
        "ctrl+p",
        "ctrl+n",
        "ctrl+a",
        "ctrl+e",
        "alt+f",
        "alt+b",
        "alt+m",
        "ctrl+d",
        "ctrl+h",
        "alt+d",
        "ctrl+k",
        "ctrl+w",
        "alt+w",
        "alt+y",
        "ctrl+m",
        "ctrl+j",
        "alt+l",
        "alt+u",
        "alt+backspace"
      ],
      "whens": [
        "isWindows && config.emacs-mcx.cursorMoveOnFindWidget && findInputFocussed && !isComposing",
        "isWindows && replaceInputFocussed && !isComposing"
      ],
      "command": ""
    },
    // VSCode's quick search is like Emacs' Occur mode. Quick search is available since VSCode 1.89 (https://code.visualstudio.com/updates/v1_89#_quick-search).
    {
      "key": "meta+s o",
      "command": "workbench.action.quickTextSearch"
    },
    // addSelectionToNext/PreviousFindMatch
    {
      "key": "ctrl+meta+n",
      "command": "emacs-mcx.addSelectionToNextFindMatch",
      "when": "editorFocus"
    },
    {
      "key": "ctrl+meta+p",
      "command": "emacs-mcx.addSelectionToPreviousFindMatch",
      "when": "editorFocus"
    },
    ////////
    // Edit commands
    ////////
    {
      "key": "ctrl+d",
      "command": "emacs-mcx.deleteForwardChar",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+h",
      "command": "emacs-mcx.deleteBackwardChar",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+\\",
      "command": "emacs-mcx.deleteHorizontalSpace",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+d",
      "command": "emacs-mcx.killWord",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+backspace",
      "command": "emacs-mcx.backwardKillWord",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+k",
      "command": "emacs-mcx.killLine",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+shift+backspace",
      "command": "emacs-mcx.killWholeLine",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+w",
      "command": "emacs-mcx.killRegion",
      "when": "editorTextFocus && !editorReadonly"
    },
    // {
    //   In original Emacs, `C-w` in isearch appends the word next to the cursor to the search string.
    //   TODO: Find a way to add a string to the search string in isearch in VSCode.
    //   "key": "ctrl+w",
    //   "command": "",
    //   "when": "editorFocus && findWidgetVisible && !isComposing"
    // },
    {
      "key": "meta+w",
      "command": "emacs-mcx.copyRegion",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+y",
      "command": "emacs-mcx.yank",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+y",
      "command": "emacs-mcx.yank",
      "when": "emacs-mcx.minibufferReading"
    },
    {
      "key": "ctrl+w",
      "command": "editor.action.clipboardCutAction",  // Ref: https://github.com/microsoft/vscode/issues/251427#issuecomment-3106145657
      "when": "(findInputFocussed || replaceInputFocussed || inputBoxFocus || patternExcludesInputBoxFocus || patternIncludesInputBoxFocus || searchInputBoxFocus || replaceInputBoxFocus || textInputFocus) && !isComposing" // I picked up the conditions from https://www.whitphx.info/posts/20230217-vscode-undocumented-contexts/ manually without enough testing... Propose a fix on this line if you find a better condition or any issue.
    },
    {
      "key": "ctrl+y",
      "command": "editor.action.clipboardPasteAction",  // Ref: https://github.com/microsoft/vscode/issues/251427#issuecomment-3106145657
      "when": "(findInputFocussed || replaceInputFocussed || inputBoxFocus || patternExcludesInputBoxFocus || patternIncludesInputBoxFocus || searchInputBoxFocus || replaceInputBoxFocus || textInputFocus) && !isComposing" // I picked up the conditions from https://www.whitphx.info/posts/20230217-vscode-undocumented-contexts/ manually without enough testing... Propose a fix on this line if you find a better condition or any issue.
    },
    {
      "key": "meta+y",
      "command": "emacs-mcx.yank-pop",
      "when": "editorTextFocus && !editorReadonly"
    },
    // {
    // TODO: Find a command to set the search string.
    //   "key": "meta+y",
    //   "command": "emacs-mcx.isearchExit",
    //   "when": "editorFocus && findWidgetVisible && !isComposing"
    // },
    {
      "key": "ctrl+o",
      "command": "lineBreakInsert",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": true
    },
    {
      "key": "ctrl+m",
      "command": "emacs-mcx.newLine",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": "interruptOnly"  // C-m in isearch exits isearch but doesn't insert a new line.
    },
    {
      "key": "ctrl+j",
      "command": "emacs-mcx.newLine",
      "when": "editorTextFocus && !editorReadonly"
      // In original Emacs, `C-j` in isearch adds "^J" (= `\n`) **to the search string**
      // TODO: Find a way to add "\n" to the search string in isearch in VSCode.
    },
    {
      "key": "ctrl+x ctrl+o",
      "command": "emacs-mcx.deleteBlankLines",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": true
    },
    {
      "key": "ctrl+x h",
      "command": "editor.action.selectAll",
      "when": "editorTextFocus",
      "isearchInterruptible": true
    },
    {
      "keys": ["ctrl+x u", "ctrl+/", "ctrl+shift+-"],
      "command": "undo",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": true
    },
    {
      "key": "ctrl+;",  // TODO: `C-x C-;` is true in the original Emacs.
      "command": "editor.action.commentLine",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": true
    },
    {
      "key": "meta+;",  // TODO: This is also different from the original Emacs.
      "command": "editor.action.blockComment",
      "when": "editorTextFocus && !editorReadonly",
      "isearchInterruptible": true
    },
    {
      "key": "ctrl+x ctrl+l",
      "command": "emacs-mcx.transformToLowercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+l",
      "command": "emacs-mcx.transformToLowercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "ctrl+x ctrl+u",
      "command": "emacs-mcx.transformToUppercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+u",
      "command": "emacs-mcx.transformToUppercase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+c",
      "command": "emacs-mcx.transformToTitlecase",
      "when": "editorTextFocus && !editorReadonly"
    },
    {
      "key": "meta+shift+6",
      "command": "emacs-mcx.deleteIndentation",
      "when": "editorTextFocus && !editorReadOnly"
    },
    // Cancel
    {
      "key": "escape",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus && editorHasSelection && !config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "escape",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus && editorHasMultipleSelections && !config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "ctrl+g",
      "command": "emacs-mcx.cancel",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+g",
      "command": "emacs-mcx.isearchAbort",
      "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
      "key": "enter",
      "command": "emacs-mcx.isearchExit",
      "when": "editorFocus && findInputFocussed && !isComposing" // `!isComposing` is necessary to avoid closing the find widget when hitting `Enter` to confirm the IME input.
    },
    { "key": "ctrl+g", "command": "noop", "when": "sideBarFocus" },
    // Assign "C-g" to the commands which are assigned to "escape" by default.
    // Ref: https://github.com/whitphx/vscode-emacs-mcx/issues/1190
    {
      "$special": "cancelKeybindings"
    },
    // Mark mode
    {
      "keys": ["ctrl+space", "ctrl+shift+2"],
      "command": "emacs-mcx.setMarkCommand",
      "when": "editorTextFocus"
    },
    {
      "key": "escape space",
      "command": "emacs-mcx.setMarkCommand",
      "when": "editorTextFocus && config.emacs-mcx.useMetaPrefixEscape"
    },
    {
      "key": "ctrl+x ctrl+x",
      "command": "emacs-mcx.exchangePointAndMark",
      "when": "editorTextFocus"
    },
    // Rectangle Mark Mode
    {
      "key": "ctrl+x space",
      "command": "emacs-mcx.rectangleMarkMode",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x r",
      "command": "emacs-mcx.startRectCommand",
      "when": "editorTextFocus"
    },
    {
      "key": "k", // ctrl+x r k
      "command": "emacs-mcx.killRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "s", // ctrl+x r s
      "command": "emacs-mcx.copyToRegister",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "i", // ctrl+x r i
      "command": "emacs-mcx.insertRegister",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "r", // ctrl+x r r
      "command": "emacs-mcx.copyRectangleToRegister",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "space", // ctrl+x r SPC
      "command": "emacs-mcx.pointToRegister",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "j", // ctrl+x r j
      "command": "emacs-mcx.jumpToRegister",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "$special": "registerCommandTypes"
    },
    {
      "key": "y", // ctrl+x r y
      "command": "emacs-mcx.yankRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "d", // ctrl+x r d
      "command": "emacs-mcx.deleteRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "meta+w", // ctrl+x r M-w
      "command": "emacs-mcx.copyRectangleAsKill",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "o", // ctrl+x r o
      "command": "emacs-mcx.openRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "c", // ctrl+x r c
      "command": "emacs-mcx.clearRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "t", // ctrl+x r t
      "command": "emacs-mcx.stringRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "key": "p", // ctrl+x r p
      "command": "emacs-mcx.replaceKillRingToRectangle",
      "when": "emacs-mcx.acceptingRectCommand && editorTextFocus"
    },
    {
      "$special": "rectMarkModeTypes"
    },
    // Suggestion
    {
      "key": "ctrl+'",
      "command": "editor.action.triggerSuggest",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+'",
      "command": "toggleSuggestionDetails",
      "when": "editorTextFocus && suggestWidgetVisible"
    },
    {
      "key": "meta+/",
      "command": "editor.action.triggerSuggest",
      "when": "editorTextFocus"
    },
    {
      "key": "meta+/",
      "command": "toggleSuggestionDetails",
      "when": "editorTextFocus && suggestWidgetVisible"
    },
    // Show commands
    {
      "key": "meta+x",
      "command": "workbench.action.showCommands"
    },
    // Sidebar
    {
      "key": "ctrl+meta+space",
      "command": "workbench.action.toggleSidebarVisibility"
    },
    // Workspace
    {
      "key": "ctrl+x ctrl+c",
      "command": "workbench.action.closeWindow",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x z",
      "command": "workbench.action.toggleZenMode",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+f",
      "command": "workbench.action.quickOpen",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+s",
      "command": "workbench.action.files.save",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+w",
      "command": "workbench.action.files.saveAs",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x s",
      "command": "workbench.action.files.saveAll",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x ctrl+n",
      "command": "workbench.action.newWindow",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x b",
      "command": "workbench.action.showAllEditorsByMostRecentlyUsed",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x k",
      "command": "workbench.action.closeActiveEditor",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 0",
      "command": "workbench.action.closeEditorsInGroup",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 1",
      "command": "workbench.action.closeEditorsInOtherGroups",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 2",
      "command": "workbench.action.splitEditorDown",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 3",
      "command": "workbench.action.splitEditorRight",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x 4",
      "command": "workbench.action.toggleEditorGroupLayout",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x o",
      "command": "workbench.action.navigateEditorGroups",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+x shift+=",
      "command": "workbench.action.evenEditorWidths",
      "when": "!terminalFocus"
    },
    {
      "key": "ctrl+meta+f",
      "command": "emacs-mcx.paredit.forwardSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+b",
      "command": "emacs-mcx.paredit.backwardSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+shift+2",
      "command": "emacs-mcx.paredit.markSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+shift+k",
      "command": "emacs-mcx.paredit.pareditKill",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+k",
      "command": "emacs-mcx.paredit.killSexp",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+meta+backspace",
      "command": "emacs-mcx.paredit.backwardKillSexp",
      "when": "editorTextFocus"
    },
    // Assign various up/down navigation commands to `ctrl+p` and `ctrl+n`.
    // They are assigned to `ctrl+p` and `ctrl+n` by default in VSCode only on macOS,
    // while this extension reassigns them on all platforms.
    {
      "keys": ["up", "ctrl+p"],
      "command": "showPrevParameterHint",
      "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "showNextParameterHint",
      "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "selectPrevSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "selectNextSuggestion",
      "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "list.focusUp",
      "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "list.focusDown",
      "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "workbench.action.quickOpenSelectPrevious",
      "when": "inQuickOpen"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "workbench.action.quickOpenSelectNext",
      "when": "inQuickOpen"
    },
    {
      "keys": ["up", "ctrl+p"],
      "command": "selectPrevCodeAction",
      "when": "codeActionMenuVisible"
    },
    {
      "keys": ["down", "ctrl+n"],
      "command": "selectNextCodeAction",
      "when": "codeActionMenuVisible"
    },
    // Don't assign `workbench.action.quickOpenNavigate*InFilePicker`
    // because these commands immediately open the selected file when the user releases the key,
    // which is not useful behavior,
    // and the navigation is just possible with the `workbench.action.quickOpenSelect*` commands,
    // which are already assigned to `ctrl+p` and `ctrl+n` above.
    // {
    //   "keys": ["up", "ctrl+p"],
    //   "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    //   "when": "inFilesPicker && inQuickOpen"
    // },
    // {
    //   "keys": ["down", "ctrl+n"],
    //   "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    //   "when": "inFilesPicker && inQuickOpen"
    // },
    {
      "key": "ctrl+m",
      "command": "workbench.action.acceptSelectedQuickOpenItem",
      "when": "inQuickOpen"
    },
    {
      "key": "ctrl+shift+'",
      "command": "editor.action.triggerParameterHints",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x j",
      "command": "workbench.action.togglePanel",
      "when": "!terminalFocus"
    },
    // Assign `ctrl+i` to `tab` with the same condition as the VSCode default keybinding on `tab`.
    {
      "key": "ctrl+i",
      "command": "tab",
      "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
      "keys": ["ctrl+i", "tab"],
      "command": "emacs-mcx.tabToTabStop",
      // This when clause was generated by Copilot 😜 I used most of the suggested conditions defensively. You may want to remove some of them.
      "when": "config.emacs-mcx.emacsLikeTab && editorTextFocus && !editorReadonly && !inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible && !inSnippetMode && !editorTabCompletion && !editorParameterHintsVisible"
    },
    {
      "key": "ctrl+x left",
      "command": "workbench.action.previousEditor",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+x right",
      "command": "workbench.action.nextEditor",
      "when": "editorTextFocus"
    },
    // Looking up identifiers
    {
      "key": "meta+.",
      // `emacs-mcx.findDefinitions` is a wrapper of `editor.action.revealDefinition` ("Go to Definition").
      "command": "emacs-mcx.findDefinitions",
      // The `when` clause is copied from the VSCode default keybinding for "Go to Definition".
      "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    {
      // Copied from the VSCode default keybinding for "Go Back",
      // which is a good alternative to Emacs' `xref-go-back`
      "key": "meta+,",
      "command": "workbench.action.navigateBack",
      "when": "canNavigateBack"
    },
    {
      // Copied from the VSCode default keybinding for "Go Forward",
      // which is a good alternative to Emacs' `xref-go-forward`
      "key": "ctrl+meta+,",
      "command": "workbench.action.navigateForward",
      "when": "canNavigateForward"
    },
    {
      // Copied from the VSCode default keybinding for "References: Find All References",
      // which is a good alternative to Emacs' `xref-find-references`
      "key": "meta+shift+/",  // "M-?". "?" is shift + "/" in US keyboard layout.
      "command": "references-view.findReferences",
      "when": "editorHasReferenceProvider"
    }
  ]
}
