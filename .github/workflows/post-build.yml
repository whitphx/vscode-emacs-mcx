name: Post-build

on:
  # For security reasons, this workflow is separated from the test-and-build workflow and triggered by the `workflow_run` event following it.
  # The deployment jobs need access to the repository secrets,
  # however, workflows triggered by the `pull_request` event don't have access to the secrets for security reasons
  # because those workflows check out the PR's branch that may have malicious external contributors' changes,
  # so we can't use the `pull_request` event to trigger the deployment jobs.
  # Then, we have to run the deployment jobs in this separated workflow that is allowed to access the secrets because it runs in the context of the default branch which can be considered as a trusted branch.
  # It is a security good practice introduced in the GitHub's official blog, https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/
  workflow_run:
    workflows: ["Test and Build"]
    types:
      - completed

env:
  python-version-file: ".python-version"
  node-version-file: ".nvmrc"

permissions: {}

jobs:
  get-build-info:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      branch: ${{ steps.build-info.outputs.branch }}
      tag: ${{ steps.build-info.outputs.tag }}
      trigger-sha: ${{ steps.build-info.outputs.trigger-sha }}
      head-sha: ${{ steps.build-info.outputs.head-sha }}
      pr-number: ${{ steps.build-info.outputs.pr-number }}
    steps:
      - name: Download build info
        uses: actions/download-artifact@v5
        with:
          name: build-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Read build info
        id: build-info
        run: |
          echo "branch=$(cat branch)"
          echo "branch=$(cat branch)" >> $GITHUB_OUTPUT
          echo "tag=$(cat tag)"
          echo "tag=$(cat tag)" >> $GITHUB_OUTPUT
          echo "trigger-sha=$(cat trigger-sha)"
          echo "trigger-sha=$(cat trigger-sha)" >> $GITHUB_OUTPUT
          echo "head-sha=$(cat head-sha)"
          echo "head-sha=$(cat head-sha)" >> $GITHUB_OUTPUT
          echo "pr-number=$(cat pr-number)"
          echo "pr-number=$(cat pr-number)" >> $GITHUB_OUTPUT

  artifact-analysis:
    needs: [get-build-info]
    if: ${{ needs.get-build-info.outputs.pr-number != '' }}

    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - uses: actions/download-artifact@v5
        with:
          name: emacs-mcx
          path: ${{ runner.temp }}/emacs-mcx
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact attestation
        run: |
          echo "Verifying attestation for desktop package..."
          VSIX_FILES=(${{ runner.temp }}/emacs-mcx/emacs-mcx*.vsix)
          if [ ${#VSIX_FILES[@]} -eq 0 ]; then
            echo "Error: No VSIX file found matching emacs-mcx*.vsix" >&2
            exit 1
          elif [ ${#VSIX_FILES[@]} -gt 1 ]; then
            echo "Error: Multiple VSIX files found matching emacs-mcx*.vsix: ${VSIX_FILES[*]}" >&2
            exit 1
          fi
          VSIX_FILE="${VSIX_FILES[0]}"

          VERIFICATION_RESULT=$(gh attestation verify "$VSIX_FILE" \
            --repo ${{ github.repository }} \
            --predicate-type https://slsa.dev/provenance/v1 \
            --format json)
          jq -r '.[].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path' <<< "$VERIFICATION_RESULT" | \
            grep -x ".github/workflows/test-build.yml" || {
              echo "Error: Attestation does not match expected workflow definition path" >&2
              exit 1
            }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List files in VSIX
        run: |
          set -e
          VSIX_FILE=$(ls emacs-mcx*.vsix | head -n 1)
          if [ -z "$VSIX_FILE" ]; then
            echo "No VSIX file found matching emacs-mcx*.vsix"
            exit 1
          fi
          unzip -l "$VSIX_FILE" > vsix_file_tree.txt

      - name: Post file tree to PR
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ needs.get-build-info.outputs.pr-number }}
        with:
          script: |
            const fs = require('fs');
            const fileTree = fs.readFileSync('vsix_file_tree.txt', 'utf8');
            const prNumber = process.env.PR_NUMBER;
            const body = [
              '## VSIX File Tree',
              '```',
              fileTree,
              '```'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

  release:
    if: ${{ startsWith(needs.get-build-info.outputs.tag, 'v') }}
    needs: [get-build-info]

    runs-on: ubuntu-latest

    permissions:
      contents: write # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    steps:
      - uses: actions/download-artifact@v5
        with:
          name: emacs-mcx
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact attestation
        run: |
          echo "Verifying attestation for desktop package..."
          VSIX_FILES=(${{ runner.temp }}/emacs-mcx/emacs-mcx*.vsix)
          if [ ${#VSIX_FILES[@]} -eq 0 ]; then
            echo "Error: No VSIX file found matching emacs-mcx*.vsix" >&2
            exit 1
          elif [ ${#VSIX_FILES[@]} -gt 1 ]; then
            echo "Error: Multiple VSIX files found matching emacs-mcx*.vsix: ${VSIX_FILES[*]}" >&2
            exit 1
          fi
          VSIX_FILE="${VSIX_FILES[0]}"

          VERIFICATION_RESULT=$(gh attestation verify "$VSIX_FILE" \
            --repo ${{ github.repository }} \
            --predicate-type https://slsa.dev/provenance/v1 \
            --format json)
          jq -r '.[].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path' <<< "$VERIFICATION_RESULT" | \
            grep -x ".github/workflows/test-build.yml" || {
              echo "Error: Attestation does not match expected workflow definition path" >&2
              exit 1
            }
          jq -r '.[].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.ref' <<< "$VERIFICATION_RESULT" | \
            grep "refs/tags/v" || {
              echo "Error: Attestation does not match expected workflow trigger ref" >&2
              exit 1
            }

      - name: Create a new release
        uses: softprops/action-gh-release@v2
        with:
          files: emacs-mcx*.vsix
          generate_release_notes: true
          tag_name: ${{ needs.get-build-info.outputs.tag }}

  publish:
    if: ${{ startsWith(needs.get-build-info.outputs.tag, 'v') }}
    needs: [get-build-info]

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [marketplace, openvsx]

    steps:
      - uses: actions/download-artifact@v5
        with:
          name: emacs-mcx
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify artifact attestation
        run: |
          echo "Verifying attestation for desktop package..."
          VSIX_FILES=(${{ runner.temp }}/emacs-mcx/emacs-mcx*.vsix)
          if [ ${#VSIX_FILES[@]} -eq 0 ]; then
            echo "Error: No VSIX file found matching emacs-mcx*.vsix" >&2
            exit 1
          elif [ ${#VSIX_FILES[@]} -gt 1 ]; then
            echo "Error: Multiple VSIX files found matching emacs-mcx*.vsix: ${VSIX_FILES[*]}" >&2
            exit 1
          fi
          VSIX_FILE="${VSIX_FILES[0]}"

          VERIFICATION_RESULT=$(gh attestation verify "$VSIX_FILE" \
            --repo ${{ github.repository }} \
            --predicate-type https://slsa.dev/provenance/v1 \
            --format json)
          jq -r '.[].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.path' <<< "$VERIFICATION_RESULT" | \
            grep -x ".github/workflows/test-build.yml" || {
              echo "Error: Attestation does not match expected workflow definition path" >&2
              exit 1
            }
          jq -r '.[].verificationResult.statement.predicate.buildDefinition.externalParameters.workflow.ref' <<< "$VERIFICATION_RESULT" | \
            grep "refs/tags/v" || {
              echo "Error: Attestation does not match expected workflow trigger ref" >&2
              exit 1
            }

      - run: |
          files=( emacs-mcx*.vsix )
          echo "vsix_filename=${files[0]}" >> $GITHUB_ENV
      - if: matrix.target == 'marketplace'
        name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v2
        with:
          extensionFile: "${{ env.vsix_filename }}"
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
      - if: matrix.target == 'openvsx'
        name: Publish to Open VSX Registry
        uses: HaaLeo/publish-vscode-extension@v2
        with:
          extensionFile: "${{ env.vsix_filename }}"
          pat: ${{ secrets.OPEN_VSX_TOKEN }}
